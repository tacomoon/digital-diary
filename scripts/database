#!/bin/bash

PORT=5432
IMAGE_NAME='digital-diary-database'
VOLUME_NAME='digital-diary-postgres-data'

function check_container_exists() {
    if [[ -z $(docker images ${IMAGE_NAME} -q) ]]; then
        echo "Unable to find image '$IMAGE_NAME'" >&2
        exit 1
    fi
}

function find_running_container() {
    CONTAINER_ID=$(docker ps -q -f=ancestor=${IMAGE_NAME}:latest)
}

function check_container_running() {
    check_container_exists
    find_running_container

    if [[ -z ${CONTAINER_ID} ]]; then
        echo "Unable to find running image '$IMAGE_NAME:latest'" >&2
        exit 1
    fi
}

function stop_running_container() {
    find_running_container

    if [[ ${CONTAINER_ID} ]]; then
        echo "Stopping running '$IMAGE_NAME' container $CONTAINER_ID"
        docker stop ${CONTAINER_ID}
    fi
}

case $1 in

    b | build )
        VERSION=$(date +'%s')
        CONTEXT=$(dirname $0)/../database

        docker build -t ${IMAGE_NAME}:${VERSION} -f ${CONTEXT}/Dockerfile ${CONTEXT}
        docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:latest
        ;;

    r | run )
        check_container_exists
        stop_running_container

        echo "Running '$IMAGE_NAME:latest' image with volume '$VOLUME_NAME' on port $PORT"
        docker run -d -p ${PORT}:5432 -v ${VOLUME_NAME}:/var/lib/postgresql/data ${IMAGE_NAME}:latest
        ;;

    c | connect )
        check_container_running

        echo "Connecting to database cli in running '$IMAGE_NAME:latest' container $CONTAINER_ID"
        docker exec -it ${CONTAINER_ID} bash -c "psql -U postgres -d digital_diary"
        ;;

    s | stop )
        check_container_running
        stop_running_container
        ;;

    clean )
        stop_running_container

        echo "Removing all related images and containers"
        docker rm -f $(docker ps -qa -f ancestor=${IMAGE_NAME}) 2> /dev/null
        docker rmi -f $(docker images -q ${IMAGE_NAME}) 2> /dev/null
        ;;

    * )
        if [[ ${1} ]]; then echo -e "Unknown command: $1\n"; fi

        echo -e "Commands:"
        echo -e "  b, build\tBuild '$IMAGE_NAME' image and tag as latest"
        echo -e "  r, run\tRun latest '$IMAGE_NAME' image with volume '$VOLUME_NAME' on port $PORT"
        echo -e "  c, connect\tConnect to database cli in running '$IMAGE_NAME' container"
        echo -e "  s, stop\tStop running '$IMAGE_NAME' container"
        echo -e "  clean\t\tRemove '$IMAGE_NAME' images and containers"
esac
